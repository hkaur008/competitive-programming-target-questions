//Storing records  
record :  
emp_id | name  
1 | harsh  
2 | megha  
3 | supriya

uniquely identified by emp_id

operations we need to perform :

1. adding new record (insert)
2. searching the new record ( search )
3. deletion of new record (delete)

Methods to perform above operations:  
1 . Arrays:

> search : linear time : O(n)  
> {if sorted array : we can use binary search but insertion and deletion are costing because we have to maintain the sorted array.}

2. Linked_list:

   > search takes linear time as we have to traverse through all nodes till we get the desired nodes  
   > deletion and insertion in linked list takes same time as arrays.

3. Balanced_BST to store records:-

   > insertion : O(logn)  
   > search : O(logn)  
   > deletion : O(logn)

4. Create a Direct acess table:
   > insertion : O(1)
   > search : O(1)  
   > deletion : O(1)

# HASHING:

provides as a direct access table in which we can have

> insertion : O(1)  
> search : O(1)  
> deletion : O(1)

### Hash function:

It maps big number of string into small integer that can be used to as index in hash table.

for example: h(x) // hash_function  
h(x)=x mod 7

for inputs {7, 49 ,50 , 30, 40};

1. h(7) => 7 mod 7: 0
2. h(49) => 49 mod 7: 0
3. h(50) => 50 mod 7: 1
4. h(30) => 30 mod 7: 2
5. h(40) => 40 mod 7: 5

Collision means getting same index value for 2 diff inputs as for input 1 and 2 , we have hash function value same , i.e zero .

## Collision handling :

1. Chaining:
   Each hash table cell ponting to a linked list in which elements have same hash function value.  
   eg: 0 --> 7 , 49  
   1 --> 50  
   2 --> 30  
   5 --> 40  
   In above case , hash table can certainly have only 7 hash function values , i.e {0,1,2,3,4,5,6}

2. Open Addressing :  
   All elements as stored in hash tabes no need of pointing to different linked list.

   > linear probing  
   > quadratic probing  
   > double hasing
